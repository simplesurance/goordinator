#http_server_listen_addr = ":8085"
https_server_listen_addr = ":8084"
https_ssl_cert_file = ""
https_ssl_key_file = ""

# the local http and https endpoints that receives github webhook events
github_webhook_endpoint = "/listener/github"
github_webhook_secret = ""

# GitHub API token, required when github actions are defined
github_api_token = "my-secret-token"

# Supported log formats: logfmt, console, json
log_format = "logfmt"

# The key that is used for logging the timestamp. If empty, timestamps will not
# be included in log messages.
log_time_key = "time_iso8601"

# log_level controls the priority threshold for log messages.
# All messages with the specified or a higher priority are logged.
# Supported values: debug, info, warn, error, panic, fatal
log_level =  "info"

# The rule section defines actions that are triggered by github webhook events.
[[rule]]
  # identifier of the rule
  name = "trigger-ci-jobs"
  # for which event source the rule applies, only "github" is
  # supported and is the default if unspecified
  event_source = "github"
  # a JSON query (JQ) string that runs on the JSON representation of the event.
  # The result must be a single boolean value. If it's true the actions of the
  # rule are executed.
  # The JSON representation of github events, is the github webhook JSON event
  # (https://docs.github.com/en/webhooks/webhook-events-and-payloads).
  filter_query = '''
.repository.name == "testrepo" and (
  .action == "synchronize" and ([.pull_request.labels[].name] | map(select(. == "ci")) | length) > 0
) or (
  .action == "labeled" and .label.name == "ci"
)
'''

 # Actions that are executed when the event_source and filter_query matches.
 # All actions are run in parallel.
 # They are retried until a timeout expires when their execution fails.
 # Fields can contain go template strings that are replaced with concrete
 # information from the event.
 # The following template strings are supported:
 # - {{ .Event.PullRequestNr }}
 # - {{ .Event.BaseBranch }}
 # - {{ .Event.Branch }}
 # - {{ .Event.CommitID }}
 # - {{ .Event.Repository }}
 # - {{ .Event.RepositoryOwner }}
 # - {{ .Event.EventType }}
 # - {{ .Event.DeliveryID }}
 # - {{ .Event.Provider }}
 # The following template functions can be used:
 # - {{ queryescape "a&b" }}
 #   Escapes a string so it can be safely placed inside a URL query.
  [[rule.action]]
   # The "httprequest" action sends a http-request. :-)
   action = "httprequest"
   # url to that the httprequest is send
   url = "https://circleci.com/api/v2/project/gh/goordinator/checks/pipeline"
   # the request method to use, the default is "post"
   # method = "post"
   # http basic auth user
   user = "<token>"
   # http basic auth password
   password = ""
   # http headers as a map
   headers = { "content-type" = "application/json" }
   # data is the http-request body
   data = '''
   {
     "branch": "pull/14380/head"
   }
   '''

  [[rule.action]]
    # updatebranch updates the GitHub pull request with the changes from its
    # base-branch. The changes from the base branch are merged into the
    # pull request branch.
    # The github_api_token must be defined.
    action = "updatebranch"

  [[rule.action]]
    # removelabel removes a label from the GitHub Pull-Request for that the
    # event was received.
    # The github_api_token must be defined.
    action = "removelabel"
    label = "ci"
