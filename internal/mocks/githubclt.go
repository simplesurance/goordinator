// Code generated by MockGen. DO NOT EDIT.
// Source: internal/githubclt/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v40/github"
)

// MockPRIterator is a mock of PRIterator interface.
type MockPRIterator struct {
	ctrl     *gomock.Controller
	recorder *MockPRIteratorMockRecorder
}

// MockPRIteratorMockRecorder is the mock recorder for MockPRIterator.
type MockPRIteratorMockRecorder struct {
	mock *MockPRIterator
}

// NewMockPRIterator creates a new mock instance.
func NewMockPRIterator(ctrl *gomock.Controller) *MockPRIterator {
	mock := &MockPRIterator{ctrl: ctrl}
	mock.recorder = &MockPRIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPRIterator) EXPECT() *MockPRIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockPRIterator) Next() (*github.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*github.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockPRIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockPRIterator)(nil).Next))
}
